#!/usr/bin/env python

import time
import os
import subprocess
import re
import phatbeat
from mpd import MPDClient

class SimpleClient:
    def __init__(self):
        self.mpd_client = None

    @property
    def client(self):
        if self.mpd_client == None:
            mpd_client = MPDClient()
            mpd_client.timeout = 10
            mpd_client.connect("localhost", 6600)
            self.mpd_client = mpd_client
        return self.mpd_client

    def status(self, property):
        return self.client.status()[property]

    @property
    def volume(self):
        return int(self.status('volume'))

    @volume.setter
    def volume(self, change):
        new_volume = self.volume + change
        self.client.setvol(new_volume)
        return self.volume

    @property
    def is_playing(self):
        return self.status('state') == 'play'

    def play_pause(self):
        if not self.client.playlist():
            print('load "default" playlist')
            self.client.load('default')
        if self.is_playing:
            print('pause')
            self.client.stop()
        else:
            print('play')
            self.client.play()

class Pixel:
    def __init__(self, id):
        self.id = id
        default = {
            'r': 0,
            'g': 0,
            'b': 0,
            'brightness': 0
        }
        self.default = default
        self.state = default
        self.velocity = default
        self.clock = time.time()

    def clear(self):
        self.set(self.default, self.default)

    def set(self, state, velocity=None):
        self.state = state
        if velocity == None:
            velocity = self.default
        self.velocity = velocity
        self.clock = time.time()

    def render(self):
        state = self.state
        phatbeat.set_pixel(self.id, state['r'], state['g'], state['b'], state['brightness'])

    def loop(self):
        delta = time.time() - self.clock
        new_state = {
            'r': min(255, max(0, self.state['r'] + self.velocity['r'] * delta)),
            'g': min(255, max(0, self.state['g'] + self.velocity['g'] * delta)),
            'b': min(255, max(0, self.state['b'] + self.velocity['b'] * delta)),
            'brightness': min(1, max(0, self.state['brightness'] + self.velocity['brightness'] * delta))
        }
        self.state = new_state
        self.clock = time.time()

class VU:
    def __init__(self):
        self.pixels = list(map(lambda x: Pixel(x), range(0, 16)))

    def loop(self):
        for pixel in self.pixels:
            pixel.loop()

    def render(self):
        for pixel in self.pixels:
            pixel.render()

    def flash(self):
        for pixel in self.pixels:
            pixel.set({
                'r': 100,
                'g': 100,
                'b': 100,
                'brightness': 0.5
            }, {
                'r': 100,
                'g': 0,
                'b': 0,
                'brightness': 0
            })

    def bar(self, value, max_value):
        last_command_time = time.time()
        level = min(7, int(round(7*(float(value)/max_value))))
        for x in range(0, 7):
            if(x < level):
                self.pixels[x].set({
                    'r': 100,
                    'g': 100,
                    'b': 100,
                    'brightness': 0.2
                }, {
                    'r': 0,
                    'g': 0,
                    'b': 0,
                    'brightness': -0.01
                })

if __name__ == "__main__":
    client = SimpleClient()
    vu = VU()
    vu.flash()

    @phatbeat.on(phatbeat.BTN_VOLUP)
    def volume_up(pin):
        print(client.volume(+3))
        vu.bar(client.volume(), 50)

    @phatbeat.on(phatbeat.BTN_VOLDN)
    def volume_down(pin):
        print(client.volume(-3))
        vu.bar(client.volume(), 50)

    @phatbeat.on(phatbeat.BTN_PLAYPAUSE)
    def play_pause(pin):
        print(client.play_pause())

    try:
        while True:
            vu.loop()
            vu.render()
            phatbeat.show()
            time.sleep(1/24.0)

    except KeyboardInterrupt:
        pass
